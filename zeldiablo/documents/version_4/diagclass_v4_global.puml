@startuml


class Position {
- x: int
- y: int
+ Position(int, int)
+ getX(): int
+ getY(): int
+ setX(int)
+ setY(int)
}

abstract CaseEffet {
- effet: String
+ executerEffet(LabyJeu,Labyrinthe,String)
+ getCaseEffet(Labyrinthe,int,int): CaseEffet
}

Position <|-- CaseEffet

Position <|-- Entite

class Entite {
- vie: int
+ Entite(int, int, pv)
+ deplacer(Labyrinthe, String)
+ attaquer(Entite) : int
+ subirDegats(int)
+ etreMort() : boolean
+ getVie() : int
+ setVie(int)
}


Entite <|-- Monstre

class Monstre{
+ Monstre(int, int, int)
+ deplacer(Labyrinthe)
+ estProcheDePerso(Labyrinthe) : boolean
}

Entite <|-- Perso

class Perso{
+ Perso(int, int, int)
+ etrePresent(int, int) : boolean
+ estProcheDeMonstre(Labyrinthe)
+ estSurCaseEffet(Labyrinthe): boolean
}

CaseEffet <|-- Sortie

class Sortie {
+ Sortie(int, int)
+ executerEffet(LabyJeu, Labyrinthe, String)
}

CaseEffet <|-- Feu

class Feu {
+ Feu(int, int)
+ executerEffet(LabyJeu, Labyrinthe, String)
}

Monstre "*" <-- "1" Labyrinthe : -monstre
Perso "1" <-- "1" Labyrinthe : - pj
Sortie "*" <-- "1" Labyrinthe : - sortie
Feu "*" <-- "1" Labyrinthe : - feu

class Labyrinthe {
- nbMonstre : int
- pj: Perso
- monstre: List<Monstre>
- caseEffet: List<CaseEffet>
- inventaire: String[]
- murs: boolean[][]
- amulette: Position
+ getSuivant(int, int, String) : int[][]
+ Labyrinthe(String, int)
+ ajoutMonstreLaby()
+ deplacerPerso(String, LabyJeu)
+ actionMonstre()
+ peutSeDeplacer(int ,int): boolean
+ etreCerne(Monstre): boolean
+ etreFini(): boolean
+ setPJ(Perso)
+ getLengthY(): int
+ getLength(): int
+ getMur(int, int): boolean
+ getPerso(): Perso
+ getMonstre()
+ getNbMonstre(): int
+ getInventaire(): String[]
+ getAmulette(): Position
+ estSurAmulette(): boolean
+ ajouterItem(String)
}

Labyrinthe "1" <--* "1" LabyJeu : - Laby

class LabyJeu{
- laby: Labyrinthe
- labyD: LabyDessin
- map: Labyrinthe[][]
- x: int
- y: int
- compteurFeu: int
- compteur: int
- enFeu: boolean
+ LabyJeu(Labyrinthe, LabyDessin)
+ LabyJeu(String[], LabyDessin)
+ changerLabyrinthe(String)
+ getEnFeu(): boolean
+ getLaby(): Labyrinthe
+ getLabyD(): LabyDessin
+ setFeu(boolean)
}

LabyJeu <.. Main

class Main{
- main()
- main(String[])
}

LabyDessin <.. Main

class LabyDessin{
- sprite: Sprite
+ dessinerJeu(Jeu, Canvas)
+ getSprite(): Sprite
}

Sprite "1" <-- "*" LabyDessin
class Sprite {
     -img_heros : Image
     -img_monstre : Image
     -img_monstre_mort : Image
     -img_mur : Image
     -img_feu : Image
     -img_amulette : Image
     -img_sol : Image
     -img_heros_degat : Image
     -img_intermediaire : Image
     -changement: boolean
     +setImgMur(Image)
     +setImgHeros(Image)
     +setImgMonstreMort(Image)
     +getImgHeros(): Image
     +getImgMonstre(): Image
     +getImgMonstreMort(): Image
     +getImgSol(): Image
     +getImgFeu(): Image
     +getImgAmulette(): Image
     +getChang(): boolean
     +changementHerosDegat()
}

interface Jeu {
    + update(double, Clavier)
    + etreFini(): boolean
    + init()
    + getLabyD(): LabyDessin
}

Jeu <|.. LabyJeu
DessinJeu <|.. LabyDessin

class MoteurJeu{
- <static> width: double
- <static> height: double
- <static> FPS: int
+ <static> launch(jeu: Jeu, dessin: DessinJeu)
+ <static> setTaille(width: double, height: double)
+ <static> setFPS(FPS: int)
+ start(primaryStage: Stage)
+ startAnimation(canvas: Canvas)
}

MoteurJeu "1" --> "1" Jeu : - <static> jeu

interface DessinJeu{
+ dessinerJeu(jeu: Jeu, canvas: Canvas)
+ getSprite(): Sprite
}

MoteurJeu "1" --> "1" DessinJeu : - <static> dessin

class Clavier{
- haut: boolean
- bas: boolean
- gauche: boolean
- droite: boolean
- coup: boolean
+ appuyerTouche(event : KeyEvent)
+ relacherTouche(event : KeyEvent)
}

MoteurJeu "1" --> "1" Clavier : - clavier

MoteurJeu <--  Main

@enduml